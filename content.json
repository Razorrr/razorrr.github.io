[{"title":"机器学习方法=模型+策略+算法","date":"2017-01-23T03:56:34.000Z","path":"2017/01/23/机器学习方法-模型-策略-算法/","text":"机器学习方法都是由模型、策略、算法构成的，可简单表示为1方法 = 模型 + 策略 + 算法 模型机器学习首先考虑的是要学习什么样的模型，比如说：在监督学习过程中，模型就是所要学习的 条件概率分布 或 决策函数。即：1模型 = 条件概率分布 | 决策函数 而模型的假设空间，则是包含了所有 分布 或 函数 的集合。通常假设空间里的 分布 或 函数 有无穷多个。 策略策略，就是按照什么方法去选择最优的模型。比如说监督学习里的 经验风险最小化策略、结构风险最小化策略。哈？这两个又是什么鬼？要解释这个首先得了解三个概念：损失函数（Loss Function），期望损失（Expected Loss），经验损失（Empirical Loss）。损失函数：与损失函数相关的有3个值：输入值X，输出值f（X），真实值Y。通过度量f（X）与Y之间的误差，来评判模型的好坏。误差越小，模型越好。机器学习常用的损失函数有以下几种： 0-1损失函数 平方损失函数 绝对损失函数 对数损失函数（对数似然损失函数） 期望损失： R = L（X，f（X）） P（X, f（X））期望损失是模型f（X）关于联合分布P（X,Y）的平均意义下的损失。*而我们的目标就是找到一个期望损失最小的模型。但是，P（X,Y）是未知的，因此从这个方程去求期望损失是不行的。 经验损失： R = 1/N * sum（L（X，f（X））经验损失是训练样本集的平均损失。 之前说到P（X,Y）未知因此期望损失不可求，但是，根据大数定律， 当样本容量N趋于无穷大时，经验损失趋于期望损失。这就有希望了？！但但是，现实中的训练样本数量很有限， 甚至很小，所以用经验损失来估计期望损失往往很不理想。 怎么办？这时候就是我们的策略登场的时候： 经验风险最小化策略、结构风险最小化策略。 经验风险最小化策略：简单粗暴的认为经验损失最小的模型就是最好的。当样本足够多的时候，效果OK，但是样本不足即容易过拟合（Over fitting）。结构风险最小化策略：认为结构风险最小的模型最好。结构风险的函数是在经验风险的基础上多加里正则化项或罚项λJ（f），J（f）表示模型的复杂度，是假设空间上的泛函。到这里可以看出，我们以监督学习为例，到这里监督学习的问题已经变为里 经验 或 结构 风险函数 的优化问题。 算法算法，就是用什么计算方法求解最优模型，怎么在找到最优解的同时，保证求解过程的高效，是算法部分要解决的问题。","tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://xrazor.net/tags/机器学习/"},{"name":"算法","slug":"算法","permalink":"http://xrazor.net/tags/算法/"}]},{"title":"python中\"if __name__ == '__main__':\" 的作用","date":"2017-01-22T03:14:16.000Z","path":"2017/01/22/python中if __name__ == '__main__': 的作用/","text":"先给出一个代码的样例，譬如你有一个文档叫test.py： 1234567def test111(): print &quot;正在执行111号模块&quot; def test222(): print &quot;正在执行222号模块&quot; if __name__ == &apos;__main__&apos;: test111() test222() 因为&quot;__name__&quot;是python的一个内置函数，当程序完整执行时，python会把 __name__ = __main__； 当程序部分执行时（即调用其中的一个def），__name__= 模块名字。 两种不同的情况执行结果如下： 当直接执行test.py 的时候，__name__ = __main__，此时输出结果为： 12正在执行111号模块正在执行222号模块 当只调用test111（）时，__name__ = test111（），此时输出结果为： 1正在执行111号模块","tags":[{"name":"python","slug":"python","permalink":"http://xrazor.net/tags/python/"}]},{"title":"scrapy中对unicode的处理","date":"2017-01-15T03:37:08.000Z","path":"2017/01/15/scrapy中对unicode的处理/","text":"用scrapy爬虫框架爬取的数据，在调用extract()后， 默认数据返回的编码格式是unicode， 比如中文就会显示为\\xe7\\x94等等。为了使之在存储中显示为中文，可在pipeline.py中处理如下： 12345678class SeekjobPipeline(object): def __init__(self): self.file = codecs.open(&apos;../results.json&apos;, &apos;wb&apos;, encoding=&apos;utf-8&apos;) def process_item(self, item, spider): line = json.dumps(dict(item)) + &apos;\\n&apos; self.file.write(line.decode(&quot;unicode_escape&quot;)) return item 其中的process_item方法是必须调用的用来处理item，并且返回值必须为Item类的对象，或者是抛出DropItem异常。并且上述方法将得到的item实现解码，以便正常显示中文，最终保存到创建的results.json文件中。而json.dumps是用来将Python中（字典，列表等）变量格式化成json字符串输出。 转中文的关键点是这一句:’line.decode(“unicode_escape”)’ 注意：在编写完pipeline后，为了能够启动它，必须将其加入到ITEM_PIPLINES配置中，即在settings.py中加入下面一句：123ITEM_PIPELINES = &#123; &apos;seekjob.pipelines.SeekjobPipeline&apos;: 300,&#125;","tags":[{"name":"python","slug":"python","permalink":"http://xrazor.net/tags/python/"},{"name":"scrapy","slug":"scrapy","permalink":"http://xrazor.net/tags/scrapy/"}]},{"title":"用urllib.quote进行URL编码","date":"2017-01-12T04:24:07.000Z","path":"2017/01/12/用urllib-quote进行URL编码/","text":"python的url编码函数是在类urllib库中，使用方法是： urllib.quote(string[, safe])，除了三个符号“_.-”外，将所有符号编码，后面的参数safe是不编码的字符. 简单的例子如下： &gt;&gt;&gt; import urllib &gt;&gt;&gt; urllib.quote(&quot;a-b-c&quot;) &apos;a-b-c&apos; &gt;&gt;&gt; urllib.quote(&quot;a+b+c&quot;) &apos;a%2Bb%2Bc&apos; &gt;&gt;&gt; urllib.quote(&quot;http://test.com/a+b+c&quot;) &apos;http%3A//test.com/a%2Bb%2Bc&apos; &gt;&gt;&gt; urllib.quote(&quot;http://test.com/a+b+c&quot;, &quot;:/&quot;) &apos;http://test.com/a%2Bb%2Bc&apos; &gt;&gt;&gt; urllib.quote(&quot;http://test.com/?q=a+b+c&quot;, &quot;:?=/&quot;) &apos;http://test.com/?q=a%2Bb%2Bc&apos; 所以urllib.quote的作用是使生成的更符合规范的URL","tags":[{"name":"python","slug":"python","permalink":"http://xrazor.net/tags/python/"}]},{"title":"pip换源方法","date":"2017-01-11T02:04:58.000Z","path":"2017/01/11/关于pip换源方法/","text":"用自带的pip源简直是龟速，换成国内的镜像就快很多，比如豆瓣的镜像：http://pypi.douban.com速度就非常的快 临时换源方法pip install pythonModuleName -i https://pypi.douban.com/simplepythonMudleName直接替换为你想要下载的包的名字即可 永久换源方法我是archlinux系统，需要修改的文件是/root/.pip/pip.conf12[global]index-url = https://pypi.douban.com/simple 这样改好后就相当于更改了pip的默认下载源","tags":[{"name":"python","slug":"python","permalink":"http://xrazor.net/tags/python/"}]},{"title":"在Archlinux上安装hp1020打印机的方法","date":"2017-01-10T04:37:02.000Z","path":"2017/01/10/在Archlinux上安装hp1020打印机的方法/","text":"从windows换到linux，在打印机的问题上折腾了不少时间，网上各种教程不少，也是过很多，比如用hplip的，hplip+cups的，最后我是用foo2zjs成功安装了我的hp1020.当然其他型号的也可以依葫芦画瓢。下面开始。 下载开源驱动foo2zjs从这里进入foo2zjs页面。里面有详细的英文指南。英语不好的同鞋请跟着我的步骤走。在命令行窗口输入以下命令下载foo2zjs套件：$ wget -O foo2zjs.tar.gz http://foo2zjs.rkkda.com/foo2zjs.tar.gz你应该知道代码是从“$”符号后开始的：D 下载好后用以下命令解压并安装$ tar zxf foo2zjs.tar.gz 用cd命令，进入解压好的目录$ cd foo2zjs 用make命令编译$ make 获取针对某一型号打印机的一些额外文件$ ./getweb xxxx这里的xxxx对应你的打印机型号，比如我是hp1020，命令行则为：$ ./getweb 1020 然后正式安装驱动先获取root权限$ su然后再输入命令：$make install 安装CUPSCUPS 是一个打印机管理套件。安装驱动做的是为了让计算机能够识别到你的打印机，而安装CUPS 是为了让计算机和打印机建立联系。在UBUNTU16.04及以上的系统中输入以下命令获取CUPS：$ sudo apt install cups在Archlinux系统中用以下命令获取CUPS：$ sudo pacman -S cups安装好后用任意浏览器访问地址：http://localhost:631然后你就会看到一个管理界面，点击上方菜单你栏的Administrator，然后用root登录，输入密码，随后点Add printer。正常情况下到这一步你应该能看到打印机的具体型号，比如说HP1020XXXXX，然后跟着导航走就可以了。以上就是我的安装方法。供参考。","tags":[{"name":"Linux","slug":"Linux","permalink":"http://xrazor.net/tags/Linux/"}]},{"title":"为什么要输出自己的知识","date":"2017-01-10T01:13:10.000Z","path":"2017/01/10/为什么要输出自己的知识/","text":"为什么要习惯“输出”知识？我们每个人都经历了十几年甚至几十年漫长的学习生涯， 不知道大家有没有过这样的经历： 学了很多但是讲不出来 知识点无法串成一个体系 感觉东西越学越多 我也有过相似的经历，并且为此困惑了很长的时间，直到看到一句话： 最好的学习方式就是“输出”。 的确，从别人那“听”来的知识，都是别人的，只有从自己这“输出”出去的知识才是自己的。这“输出”的过程，等于是强迫大脑对自己的知识进行系统化联接的过程，是一个对自己知识在加工的过程。所以，当我们做过一次演讲、发表一篇文章后，总感觉自己对相关的知识的理解更深了。 怎么“输出”知识首先要明确的是，“输出”的知识不一定要给到某一个具体的对象，而是通过这个过程对自己的思路和知识储备有一个归纳整理的过程，因此，“输出”的方法就有很多啦。 1.写博客。随便找个地儿，有什么心得感悟，就记录下来，就像写日记一样（其实写日记真的是一个很好的习惯）。等到过一段时间再会过头来印证，彼时的理解对不对？2.现场分享。不要害怕和大家交流自己的观点，世上不会有相同的两片叶子，大胆说出自己的想法，不仅使别人得到启发，更重要的是自己在说的过程中对思维进行了提炼。3.对着镜子讲话。这是我发现的一个秘诀。有时候可能对自己不是很有自信，或是想法还没有很成熟的时候，就对镜子对着自己说，尽可能的把自己的想法描述得很清晰。当你能很清晰很有层次的描述某个问题的时候，说明你已经理解了它；当你能用三言两语把它讲清楚的时候，你已经掌握了它；当你无论碰到谁都能用合适的语言在短时间内使其窥探到问题的全貌的时候，你已经驾驭了它。 现在网络很发达，要做什么分享也很方便，无数的平台无数的渠道，在互联网城邦中，做一个有分享精神的人，利人利己利国利民。：D","tags":[{"name":"IQ","slug":"IQ","permalink":"http://xrazor.net/tags/IQ/"}]}]